package me.jeu.amolejourney;

import quentin.jeu.mole.GameServices;
import quentin.jeu.mole.utils.Save;
import android.app.Activity;
import android.content.Intent;
import android.net.Uri;

import com.badlogic.gdx.Gdx;
import com.google.android.gms.games.Games;
import com.google.example.games.basegameutils.GameHelper;
import com.google.example.games.basegameutils.GameHelper.GameHelperListener;


public class DroidGoogleServices implements GameServices{

	GameHelper gameHelper;
	private Activity context;
	private final static int REQUEST_CODE_UNUSED = 9002;

	
	public DroidGoogleServices(Activity context){
		this.context=context;
		// Create the GameHelper.
		gameHelper = new GameHelper(context, GameHelper.CLIENT_GAMES);
		gameHelper.enableDebugLog(false);
		GameHelperListener gameHelperListener = new GameHelper.GameHelperListener(){
			@Override
			public void onSignInSucceeded(){
			}

			@Override
			public void onSignInFailed(){
			}
		};
		gameHelper.setup(gameHelperListener);
	}
	
	
	@Override
	public void signIn() {
		try{
			context.runOnUiThread(new Runnable(){
				@Override
				public void run(){
					gameHelper.beginUserInitiatedSignIn();
				}
			});
		}
		catch (Exception e){
			Gdx.app.log("MainActivity", "Log in failed: " + e.getMessage() + ".");
		}
		/*
		if(MoleGame.gservices.isSignedIn() && Save.gd.visitnbrgs!=0){
			MoleGame.gservices.incrementexplore(Save.gd.visitnbrgs);
			Save.gd.visitnbrgs=0;
		}
		if(MoleGame.gservices.isSignedIn() && Save.gd.metalspentgs!=0){
			MoleGame.gservices.incrementexplore(Save.gd.metalspentgs);
			Save.gd.metalspentgs=0;
		}
		if(MoleGame.gservices.isSignedIn() && Save.gd.scoregs!=0){
			MoleGame.gservices.incrementexplore(Save.gd.scoregs);
			Save.gd.scoregs=0;
		}*/
	}

	@Override
	public void signOut() {
		try{
		context.runOnUiThread(new Runnable(){
			//@Override
			public void run(){
				gameHelper.signOut();
			}
			});
		}
		catch (Exception e){
			Gdx.app.log("MainActivity", "Log out failed: " + e.getMessage() + ".");
		}
		
	}

	@Override
	public void rateGame() {
		// Replace the end of the URL with the package of your game
		String str ="https://play.google.com/store/apps/details?id=me.jeu.amolejourney";
		context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(str)));
		
	}

	@Override
	public void submitScore1(long score) {
		if (isSignedIn() == true){
			Games.Leaderboards.submitScore(gameHelper.getApiClient(), context.getString(R.string.leaderboard_good_ol_time), score);
			//context.startActivityForResult(Games.Leaderboards.getLeaderboardIntent(gameHelper.getApiClient(), context.getString(R.string.leaderboard_id)), REQUEST_CODE_UNUSED);
		}
		else{
			signIn();
		}
		
	}
	@Override
	public void submitScore2(long score) {
		if (isSignedIn() == true){
			Games.Leaderboards.submitScore(gameHelper.getApiClient(), context.getString(R.string.leaderboard_new_challenge), score);
			//context.startActivityForResult(Games.Leaderboards.getLeaderboardIntent(gameHelper.getApiClient(), context.getString(R.string.leaderboard_id)), REQUEST_CODE_UNUSED);
		}
		else{
			signIn();
		}
		
	}

	@Override
	public void showScores() {
		if (isSignedIn() == true)
			context.startActivityForResult(Games.Leaderboards.getAllLeaderboardsIntent(gameHelper.getApiClient()), REQUEST_CODE_UNUSED);
		else{
			signIn();
		}
	}

	@Override
	public boolean isSignedIn() {
		return gameHelper.isSignedIn();
	}

	@Override
	public void showAchieve() {
		if (isSignedIn() == true)
			context.startActivityForResult(Games.Achievements.getAchievementsIntent(gameHelper.getApiClient()), REQUEST_CODE_UNUSED);
		else{
			signIn();
		}
	}


	@Override
	public void checkachiev() {
		if (isSignedIn() == true){
			Games.Achievements.getAchievementsIntent(gameHelper.getApiClient());
			if(Save.gd.uA1)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_cute_adventurer));
			if(Save.gd.uAgom)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_try_hard));
			if(Save.gd.utime>=1)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_time_slower));
			if(Save.gd.uplane>=1)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_flying_mole));
			if(Save.gd.uAplane)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_try_harder));
			if(Save.gd.ujp>=1)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_rocket_mole));
			if(Save.gd.uA2)
				Games.Achievements.unlock(gameHelper.getApiClient(), context.getString(R.string.achievement_lil_adventurer));
			
		}
		else{
			//signIn();
		}
		
	}


	@Override
	public void showScore1() {
		if (isSignedIn() == true)
			context.startActivityForResult(Games.Leaderboards.getLeaderboardIntent(
					gameHelper.getApiClient(),
					context.getString(R.string.leaderboard_good_ol_time))
				, REQUEST_CODE_UNUSED);
		else{
			signIn();
		}
		
	}


	@Override
	public void showScore2() {
		context.startActivityForResult(Games.Leaderboards.getLeaderboardIntent(
				gameHelper.getApiClient(),
				context.getString(R.string.leaderboard_new_challenge))
			, REQUEST_CODE_UNUSED);
		
	}


	@Override
	public void showScore3() {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void showScore4() {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void showScore5() {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void showScore6() {
		// TODO Auto-generated method stub
		
	}

	
}
