// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package quentin.jeu.mole.entities;

import com.badlogic.gdx.Files;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Graphics;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.Array;
import quentin.jeu.mole.graphics.MyParticleEffect;
import quentin.jeu.mole.graphics.MyParticleEmitter;
import quentin.jeu.mole.utils.Assets;
import quentin.jeu.mole.utils.GameData;
import quentin.jeu.mole.utils.MyContactlistener;
import quentin.jeu.mole.utils.MyInputProc;
import quentin.jeu.mole.utils.Save;

public class Mole
{

    private static MyContactlistener cl;
    private static MyInputProc in;
    public float acceler;
    private float accely0;
    public float airCtrl;
    public float angle;
    public float anglediff;
    private float animsens;
    private float animspeed;
    private float animtimer;
    private boolean animup;
    private Sprite armR;
    public boolean auto;
    private boolean autoplane;
    public boolean autotuto;
    public int backflip;
    public int badland;
    public boolean badlanded;
    private MyParticleEffect bleffect;
    public float blpower;
    private Sprite bodyR;
    private Texture bronze;
    public int clawup;
    public boolean colided;
    private float color0[];
    public int combo;
    public int controlup;
    public float digdamp;
    public int dist;
    private Texture dust;
    private MyParticleEffect expeffect;
    boolean explodedc;
    boolean explodedf;
    boolean explodeds;
    private Sprite eye1R;
    private Sprite eye2R;
    private Sprite eyeLR;
    private Texture fire;
    private boolean fliped;
    public int frontflip;
    private Texture gold;
    public int goodland;
    public int goodlandui;
    private Sprite hat;
    private Sprite hole1;
    private Sprite hole2;
    private Sprite hole3;
    private Sprite hole4;
    public float holeL;
    public float holeLscore;
    public boolean isudg0;
    public boolean isudg1;
    public boolean isudg2;
    public boolean isudg3;
    private Sprite jetR;
    public boolean jetpack;
    public boolean jetpacked;
    public float jpduration;
    public int jpnumber;
    public float jptimer;
    public float jptrust;
    public float landangle;
    public boolean leftimp;
    private Sprite legR;
    private int lvl;
    private float moleangle[];
    public Body molebody;
    private float moleposx[];
    private float moleposy[];
    private float newMvalue;
    private float newVvalue;
    private float newmvalue;
    private float newvvalue;
    private Sprite pawf1R;
    private Sprite pawf2R;
    private Sprite pawrR;
    public boolean plane;
    private Sprite planeR;
    public float planeaerod;
    public float planecontrol;
    public float planeduration;
    public float planetimer;
    private MyParticleEffect propeffect;
    public boolean rightimp;
    public float rotspeed;
    private Sprite sangleR;
    public Sound sbland1;
    public Sound sbland2;
    public Sound sbland3;
    boolean scaleds;
    public Sound scoin;
    public Sound sdig;
    public boolean sdigplay;
    private float sdigtimer;
    private boolean sens;
    private Sprite sensR;
    private float senstimer;
    public Sound sfire;
    public boolean sfireplay;
    private Texture silver;
    public Sound sjump;
    public Sound sland;
    private Texture smoke;
    public int speedup;
    public Sound sstar;
    public boolean sstarplay;
    public Sound sstun;
    private Texture star;
    public boolean stun;
    private Sprite stunsR;
    private float stuntimer;
    public Sound swind;
    public boolean swindplay;
    private Sprite tailR;
    public float timecontrol;
    public float timeduration;
    public boolean timeslow;
    public float timetimer;
    private float timeudg;
    public int totalgoodland;
    public float totholeL;
    private MyParticleEffect traileffect;
    private Sprite trails[];
    public float vitesse;
    public float vmax;
    public float vmin;
    private float vx;
    private float vy;
    private float y;
    private float yg0;
    private float yug1;
    private float yug2;
    private float yug3;

    public Mole(World world, MyInputProc myinputproc, MyContactlistener mycontactlistener, float af[], float af1[], int i)
    {
        isudg0 = true;
        isudg1 = false;
        isudg2 = false;
        isudg3 = false;
        stun = false;
        colided = false;
        newmvalue = 1.0F;
        newMvalue = 1.0F;
        newvvalue = 1.0F;
        newVvalue = 1.0F;
        stuntimer = 0.0F;
        sens = true;
        animup = true;
        sdigtimer = 0.5F;
        swindplay = false;
        sdigplay = false;
        sfireplay = false;
        sstarplay = false;
        leftimp = false;
        rightimp = false;
        explodedc = false;
        explodedf = false;
        explodeds = false;
        scaleds = false;
        jetpacked = false;
        speedup = 0;
        clawup = 0;
        controlup = 0;
        combo = 0;
        backflip = 0;
        frontflip = 0;
        goodland = 0;
        totalgoodland = 0;
        goodlandui = 0;
        dist = 0;
        holeL = 0.0F;
        holeLscore = 0.0F;
        totholeL = 0.0F;
        auto = false;
        autotuto = false;
        lvl = i;
        yg0 = 0.0F;
        yug1 = -10F;
        yug2 = -20F;
        yug3 = -30F;
        Object obj = new BodyDef();
        obj.type = com.badlogic.gdx.physics.box2d.BodyDef.BodyType.DynamicBody;
        obj.bullet = true;
        molebody = world.createBody(((BodyDef) (obj)));
        world = new CircleShape();
        world.setRadius(0.5F);
        obj = new FixtureDef();
        obj.shape = world;
        obj.restitution = 0.4F;
        obj.friction = 0.8F;
        obj.density = 3F;
        molebody.createFixture(((FixtureDef) (obj))).setUserData("mole");
        molebody.setTransform(0.0F, -2F, 0.0F);
        world.dispose();
        in = myinputproc;
        cl = mycontactlistener;
        if (Save.gd.accelerometer)
        {
            accely0 = Gdx.input.getAccelerometerY();
        }
        rotspeed = Save.gd.rotspeed + (float)((Save.gd.ucontrol + Save.gd.bcontrol) * 5) / 15F;
        acceler = Save.gd.acceler + (float)((Save.gd.uspeed + Save.gd.bspeed) * 1) / 15F;
        airCtrl = Save.gd.airCtrl + (float)((Save.gd.ucontrol + Save.gd.bcontrol) * 4) / 15F;
        vmin = Save.gd.vmin + (float)((Save.gd.uspeed + Save.gd.bspeed) * 5) / 15F;
        digdamp = Save.gd.claw + (float)(((Save.gd.uspeed + Save.gd.bspeed) * 15) / 15);
        vitesse = vmin;
        landangle = 20F;
        if (lvl != 2004 && lvl != 2005)
        {
            timetimer = Save.gd.timebought;
            planetimer = Save.gd.planebought;
            jpnumber = Save.gd.jpbought;
        } else
        if (lvl == 2004)
        {
            planetimer = 10F;
            jpnumber = 3;
            vmin = 30F;
            vitesse = vmin;
            autoplane = true;
        } else
        if (lvl == 2005)
        {
            jpnumber = 2;
        }
        jptimer = 3F;
        if (Save.gd.utime == 1)
        {
            timeduration = 1.75F;
            timecontrol = 1.75F;
        } else
        if (Save.gd.utime == 2)
        {
            timeduration = 1.5F;
            timecontrol = 3F;
        } else
        if (Save.gd.utime == 3)
        {
            timeduration = 1.25F;
            timecontrol = 4F;
        }
        if (Save.gd.uplane == 1)
        {
            planeduration = 1.0F;
            planecontrol = 6F;
            planeaerod = 0.4F;
        }
        if (Save.gd.uplane == 2)
        {
            planeduration = 0.75F;
            planecontrol = 4F;
            planeaerod = 0.2F;
        }
        if (Save.gd.uplane == 3)
        {
            planeduration = 0.5F;
            planecontrol = 2.0F;
            planeaerod = 0.1F;
        }
        if (Save.gd.ujp == 1)
        {
            jpduration = 1.5F;
            jptrust = 14F;
        } else
        if (Save.gd.ujp == 2)
        {
            jpduration = 2.0F;
            jptrust = 25F;
        } else
        if (Save.gd.ujp == 3)
        {
            jpduration = 1.25F;
            jptrust = 25F;
        }
        if (Save.gd.skin == 0)
        {
            world = (TextureAtlas)Assets.manager.get("img/entities/moleclassic.pack", com/badlogic/gdx/graphics/g2d/TextureAtlas);
            bodyR = new Sprite(world.findRegion("body", -1));
            pawf1R = new Sprite(world.findRegion("pawf", -1));
            pawf2R = new Sprite(world.findRegion("pawf", -1));
            pawrR = new Sprite(world.findRegion("pawr", -1));
            eye1R = new Sprite(world.findRegion("eye1", -1));
            eye2R = new Sprite(world.findRegion("eye2", -1));
            tailR = new Sprite(world.findRegion("tail", -1));
            armR = new Sprite(world.findRegion("arm", -1));
            legR = new Sprite(world.findRegion("leg", -1));
            eyeLR = new Sprite(world.findRegion("eyelid", -1));
            sensR = new Sprite((Texture)Assets.manager.get("img/entities/msens1.png", com/badlogic/gdx/graphics/Texture));
        }
        if (Save.gd.skin == 1)
        {
            world = (TextureAtlas)Assets.manager.get("img/entities/moleold.pack", com/badlogic/gdx/graphics/g2d/TextureAtlas);
            bodyR = new Sprite(world.findRegion("body", -1));
            pawf1R = new Sprite(world.findRegion("pawf", -1));
            pawf2R = new Sprite(world.findRegion("pawf", -1));
            pawrR = new Sprite(world.findRegion("pawr", -1));
            eye1R = new Sprite(world.findRegion("eye1", -1));
            eye2R = new Sprite(world.findRegion("eye2", -1));
            tailR = new Sprite(world.findRegion("tail", -1));
            sensR = new Sprite((Texture)Assets.manager.get("img/entities/msensdef.png", com/badlogic/gdx/graphics/Texture));
        }
        stunsR = new Sprite((Texture)Assets.manager.get("img/entities/stuns.png", com/badlogic/gdx/graphics/Texture));
        planeR = new Sprite((Texture)Assets.manager.get("img/entities/deltaplane.png", com/badlogic/gdx/graphics/Texture));
        jetR = new Sprite((Texture)Assets.manager.get("img/entities/jet.png", com/badlogic/gdx/graphics/Texture));
        sangleR = new Sprite((Texture)Assets.manager.get("img/entities/sangle.png", com/badlogic/gdx/graphics/Texture));
        if (Save.gd.hat == 1)
        {
            hat = new Sprite((Texture)Assets.manager.get("img/entities/hat1.png", com/badlogic/gdx/graphics/Texture));
        } else
        if (Save.gd.hat == 2)
        {
            hat = new Sprite((Texture)Assets.manager.get("img/entities/hat2.png", com/badlogic/gdx/graphics/Texture));
        }
        color0 = af;
        moleposx = new float[20];
        moleposy = new float[20];
        moleangle = new float[20];
        trails = new Sprite[20];
        hole1 = new Sprite((Texture)Assets.manager.get("img/objects/hole1.png", com/badlogic/gdx/graphics/Texture));
        hole2 = new Sprite((Texture)Assets.manager.get("img/objects/hole2.png", com/badlogic/gdx/graphics/Texture));
        hole2.setColor(af1[0], af1[1], af1[2], 1.0F);
        hole3 = new Sprite((Texture)Assets.manager.get("img/objects/hole3.png", com/badlogic/gdx/graphics/Texture));
        hole4 = new Sprite((Texture)Assets.manager.get("img/objects/hole4.png", com/badlogic/gdx/graphics/Texture));
        hole1.setSize(3F, 3F);
        hole1.setColor(af[0], af[1], af[2], 1.0F);
        i = 0;
        do
        {
            if (i >= moleposx.length)
            {
                gold = (Texture)Assets.manager.get("effect/gold.png", com/badlogic/gdx/graphics/Texture);
                silver = (Texture)Assets.manager.get("effect/silver.png", com/badlogic/gdx/graphics/Texture);
                bronze = (Texture)Assets.manager.get("effect/bronze.png", com/badlogic/gdx/graphics/Texture);
                dust = (Texture)Assets.manager.get("effect/dust1.png", com/badlogic/gdx/graphics/Texture);
                smoke = (Texture)Assets.manager.get("effect/particle.png", com/badlogic/gdx/graphics/Texture);
                fire = (Texture)Assets.manager.get("effect/fire.png", com/badlogic/gdx/graphics/Texture);
                star = (Texture)Assets.manager.get("effect/star.png", com/badlogic/gdx/graphics/Texture);
                traileffect = new MyParticleEffect();
                traileffect.loadEmitters(Gdx.files.internal("effect/badland.p"));
                traileffect.loadEmitterImages(dust);
                traileffect.findEmitter("Untitled").setContinuous(true);
                traileffect.scaleEffect(traileffect, 0, 0.02F);
                traileffect.start();
                bleffect = new MyParticleEffect();
                bleffect.loadEmitters(Gdx.files.internal("effect/badland.p"));
                bleffect.loadEmitterImages(dust);
                bleffect.setDuration(500);
                bleffect.scaleEffectAbs(bleffect, 0, 0.64F, 0.0F, 4F, 10F, 1.0F, 0, -0.8F, 0.96F, -1F, 0.0F, 2.0F, 4F, -2F);
                expeffect = new MyParticleEffect();
                expeffect.loadEmitters(Gdx.files.internal("effect/badland.p"), true);
                expeffect.loadEmitterImages(smoke);
                ((MyParticleEmitter)expeffect.getEmitters().get(0)).additive = true;
                ((MyParticleEmitter)expeffect.getEmitters().get(0)).getTint().setColors(1.0F, 0.2F, 0.0F);
                expeffect.scaleEffectAbs(expeffect, 0, 0.84F, 0.2F, 4F, 10F, 1.0F, 0, -0.8F, 0.96F, -1F, 0.0F, 2.0F, 4F, -2F);
                ((MyParticleEmitter)expeffect.getEmitters().get(0)).setAdditive(true);
                expeffect.setPosition(100F, 100F);
                expeffect.reset();
                propeffect = new MyParticleEffect();
                propeffect.loadEmitters(Gdx.files.internal("effect/prop2.p"), true);
                propeffect.loadEmitterImages(smoke);
                propeffect.scaleEffect(propeffect, 0, 0.9F);
                ((MyParticleEmitter)propeffect.getEmitters().get(0)).setAdditive(true);
                propeffect.setPosition(100F, 100F);
                propeffect.reset();
                sjump = (Sound)Assets.manager.get("sound/jump.wav", com/badlogic/gdx/audio/Sound);
                sland = (Sound)Assets.manager.get("sound/land.wav", com/badlogic/gdx/audio/Sound);
                sbland1 = (Sound)Assets.manager.get("sound/badland.wav", com/badlogic/gdx/audio/Sound);
                sbland2 = (Sound)Assets.manager.get("sound/hit.wav", com/badlogic/gdx/audio/Sound);
                sbland3 = (Sound)Assets.manager.get("sound/explosion.wav", com/badlogic/gdx/audio/Sound);
                sstun = (Sound)Assets.manager.get("sound/stun.wav", com/badlogic/gdx/audio/Sound);
                sdig = (Sound)Assets.manager.get("sound/dig.wav", com/badlogic/gdx/audio/Sound);
                swind = (Sound)Assets.manager.get("sound/wind.wav", com/badlogic/gdx/audio/Sound);
                sfire = (Sound)Assets.manager.get("sound/propulseur.wav", com/badlogic/gdx/audio/Sound);
                sstar = (Sound)Assets.manager.get("sound/stars.wav", com/badlogic/gdx/audio/Sound);
                scoin = (Sound)Assets.manager.get("sound/bonus.wav", com/badlogic/gdx/audio/Sound);
                return;
            }
            trails[i] = hole1;
            moleangle[i] = 0.0F;
            moleposx[i] = -1000F;
            moleposy[i] = -1000F;
            i++;
        } while (true);
    }

    private void auto1(float f)
    {
        if (y > yg0)
        {
            if (vitesse > 24F)
            {
                molebody.applyTorque(70F, true);
            } else
            if (vitesse > 17F)
            {
                if (molebody.getAngle() > 6.28F)
                {
                    fliped = true;
                }
                if (!fliped)
                {
                    molebody.applyTorque(70F, true);
                } else
                if (f < 8F && f > -8F)
                {
                    molebody.setFixedRotation(true);
                } else
                {
                    molebody.applyTorque(-600F / vitesse, true);
                }
                molebody.setFixedRotation(false);
            } else
            {
                if (f < 8F && f > -8F)
                {
                    molebody.setFixedRotation(true);
                } else
                {
                    molebody.applyTorque(-600F / vitesse, true);
                }
                molebody.setFixedRotation(false);
            }
        }
        if (!stun && y < yg0 - 1.0F)
        {
            if (fliped)
            {
                molebody.setTransform(molebody.getPosition().x, molebody.getPosition().y, (float)((double)molebody.getAngle() - 6.2831853071795862D));
                fliped = false;
            }
            if (vy > vitesse / 2.0F && vx > 0.0F)
            {
                molebody.setAngularVelocity(0.0F);
            } else
            {
                molebody.applyTorque(100F, true);
            }
            molebody.setLinearVelocity(new Vector2(vitesse * MathUtils.cos(molebody.getAngle()), vitesse * MathUtils.sin(molebody.getAngle())));
        }
    }

    private void auto2(float f)
    {
        if (stun) goto _L2; else goto _L1
_L1:
        if (y <= yg0) goto _L4; else goto _L3
_L3:
        if (anglediff < landangle - 4F && anglediff > -landangle + 4F)
        {
            molebody.setFixedRotation(true);
        } else
        {
            molebody.applyTorque(-600F / vitesse, true);
        }
        molebody.setFixedRotation(false);
_L2:
        return;
_L4:
        if (y >= yg0 - 1.0F) goto _L2; else goto _L5
_L5:
        if (vx <= 0.0F) goto _L7; else goto _L6
_L6:
        if (f <= 0.0F) goto _L9; else goto _L8
_L8:
        molebody.applyTorque(-f * 5F, true);
_L11:
        molebody.setLinearVelocity(new Vector2(vitesse * MathUtils.cos(molebody.getAngle()), vitesse * MathUtils.sin(molebody.getAngle())));
        return;
_L9:
        if (f < 0.0F)
        {
            molebody.applyTorque(-f * 5F, true);
        }
        continue; /* Loop/switch isn't completed */
_L7:
        if (angle > 180F)
        {
            molebody.applyTorque((180F - angle) * 5F, true);
        } else
        if (angle < 180F)
        {
            molebody.applyTorque((180F - angle) * 5F, true);
        }
        if (true) goto _L11; else goto _L10
_L10:
    }

    private void updateInput()
    {
        if (Save.gd.accelerometer)
        {
            float f = Gdx.input.getAccelerometerY();
            float f1 = Math.min(rotspeed, ((Math.abs(f) - 1.0F) * rotspeed) / 4F);
            if (f > accely0 + 1.0F)
            {
                if (plane)
                {
                    molebody.setAngularVelocity(-f1 / planecontrol);
                } else
                if (timeslow)
                {
                    molebody.setAngularVelocity(-timecontrol * f1);
                } else
                {
                    molebody.setAngularVelocity(-f1);
                }
            } else
            if (f < accely0 - 1.0F)
            {
                if (plane)
                {
                    molebody.setAngularVelocity(f1 / planecontrol);
                } else
                if (timeslow)
                {
                    molebody.setAngularVelocity(timecontrol * f1);
                } else
                {
                    molebody.setAngularVelocity(f1);
                }
            } else
            {
                molebody.setAngularVelocity(0.0F);
            }
        } else
        if (in.rightK && !in.leftK)
        {
            if (plane)
            {
                molebody.setAngularVelocity(-rotspeed / planecontrol);
            } else
            if (timeslow)
            {
                molebody.setAngularVelocity(-timecontrol * rotspeed);
            } else
            {
                molebody.setAngularVelocity(-rotspeed);
            }
        } else
        if (in.leftK && !in.rightK)
        {
            if (plane)
            {
                molebody.setAngularVelocity(rotspeed / planecontrol);
            } else
            if (timeslow)
            {
                molebody.setAngularVelocity(timecontrol * rotspeed);
            } else
            {
                molebody.setAngularVelocity(rotspeed);
            }
        } else
        {
            molebody.setAngularVelocity(0.0F);
        }
        if (in.rightK && y > yg0 && !rightimp)
        {
            molebody.applyForceToCenter(airCtrl, 0.0F, true);
            rightimp = true;
        }
        if (in.leftK && y > yg0 && !leftimp)
        {
            molebody.applyForceToCenter(-airCtrl, 0.0F, true);
            leftimp = true;
        }
        if (!in.rightK)
        {
            rightimp = false;
        }
        if (!in.leftK)
        {
            leftimp = false;
        }
        if (in.upK)
        {
            molebody.applyForceToCenter(new Vector2(0.0F, 50F), true);
        }
        if (in.downK)
        {
            vitesse = vitesse + 1.0F;
        }
    }

    private void updateSound(float f)
    {
        if (cl.molegrdtouch && vy > 0.0F)
        {
            sjump.play(0.05F, MathUtils.clamp((225F - 5F * vitesse) / 100F, 0.4F, 2.0F), 0.0F);
            cl.molegrdtouch = false;
        }
        if (isudg0)
        {
            sfire.stop();
            sfireplay = false;
            swind.stop();
            swindplay = false;
            sdigtimer = (float)((double)sdigtimer - 0.040000000000000001D * (double)(vitesse / 100F + 1.0F));
            if (sdigtimer <= 0.0F && !stun && f > 0.0008F)
            {
                sdig.play(0.1F, 1.0F * f * 12F * (vitesse / 100F + 1.0F), 0.0F);
                sdigtimer = 0.412F;
            }
        }
        if (y < 80F)
        {
            sstar.stop();
            sstarplay = false;
        }
        if (isudg0) goto _L2; else goto _L1
_L1:
        sdig.stop();
        sdigplay = false;
        if (vy >= -15F || y >= 80F) goto _L2; else goto _L3
_L3:
        if (explodedf || swindplay) goto _L5; else goto _L4
_L4:
        swind.loop(0.03333334F);
        swindplay = true;
_L2:
        if (jetpack && !sfireplay)
        {
            sfire.loop(0.5F);
            sfireplay = true;
        }
        if (y > 80F && !sstarplay)
        {
            sstar.loop(0.05F);
            sstarplay = true;
        }
        return;
_L5:
        if (!sfireplay)
        {
            sfire.loop(0.1F);
            sfireplay = true;
        }
        if (true) goto _L2; else goto _L6
_L6:
    }

    public void dead()
    {
        molebody.setGravityScale(0.0F);
        stun = true;
        molebody.setLinearVelocity(0.0F, 0.0F);
        molebody.setFixedRotation(true);
    }

    public void dispose()
    {
        traileffect.dispose();
        bleffect.dispose();
        expeffect.dispose();
    }

    public void pause()
    {
        molebody.setAwake(false);
        molebody.setLinearVelocity(0.0F, 0.0F);
    }

    public void render(SpriteBatch spritebatch, float f)
    {
        float f1;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        float f9;
        float f10;
        float f11;
        float f12;
        float f13;
        float f14;
        float f15;
        float f16;
        float f17;
        float f18;
        float f20;
        float f22;
        float f23;
        float f24;
        float f25;
        float f26;
        float f27;
        float f28;
        float f29;
        float f30;
        float f31;
        float f32;
        float f33;
        float f34;
        float f35;
        float f36;
        float f37;
        float f38;
        float f39;
        float f40;
        float f41;
        float f42;
        float f43;
        float f44;
        float f45;
        float f46;
        float f47;
        float f48;
        float f49;
        float f50;
        float f51;
        float f52;
        float f53;
        float f54;
        float f55;
        float f56;
        float f57;
        float f58;
        float f59;
        float f60;
        float f62;
        float f64;
        float f65;
        float f66;
        float f67;
        float f68;
        float f69;
        float f70;
        float f71;
        float f72;
        float f73;
        float f74;
        float f75;
        f5 = 0.0F;
        f10 = 0.0F;
        f1 = 0.0F;
        f9 = 0.0F;
        f7 = 0.0F;
        f6 = 0.0F;
        f3 = 0.0F;
        f8 = 0.0F;
        f12 = 0.0F;
        f11 = 0.0F;
        if (vx >= 0.0F)
        {
            pawf1R.setFlip(false, false);
            pawf2R.setFlip(false, false);
            bodyR.setFlip(false, false);
            tailR.setFlip(false, false);
            pawrR.setFlip(false, false);
            eye1R.setFlip(false, false);
            eye2R.setFlip(false, false);
            sensR.setFlip(false, false);
            if (eyeLR != null)
            {
                eyeLR.setFlip(false, false);
            }
            if (armR != null)
            {
                armR.setFlip(false, false);
            }
            if (legR != null)
            {
                legR.setFlip(false, false);
            }
            if (planeR != null)
            {
                planeR.setFlip(false, false);
            }
            if (sangleR != null)
            {
                sangleR.setFlip(false, false);
            }
            if (jetR != null)
            {
                jetR.setFlip(false, false);
            }
            if (hat != null)
            {
                hat.setFlip(false, false);
            }
            animsens = 1.0F;
            if (!stun)
            {
                if (y <= 0.0F)
                {
                    animtimer = (float)((double)animtimer - Math.sqrt(animspeed) * 2D * (double)f);
                    animspeed = Math.max(0.02F, vitesse / 3F);
                    if (!animup)
                    {
                        animtimer = 2.0F;
                        animup = true;
                    }
                    if (animtimer < 0.0F)
                    {
                        animtimer = 2.0F;
                    }
                } else
                {
                    if (animtimer < 0.0F)
                    {
                        animup = true;
                        animspeed = MathUtils.random(0.1F, 0.3F);
                    }
                    if (animtimer > animspeed && animup)
                    {
                        animup = false;
                    }
                    if (animup)
                    {
                        animtimer = (float)((double)animtimer - Math.sqrt(vitesse / 3F) * (double)f);
                    } else
                    {
                        animtimer = (float)((double)animtimer + Math.sqrt(vitesse / 3F) * (double)f);
                    }
                }
            }
            f15 = 1.15F * ((float)bodyR.getRegionHeight() / (float)bodyR.getRegionWidth());
            f41 = molebody.getPosition().x - 1.15F / 2.0F;
            f14 = molebody.getPosition().y - f15 / 2.0F;
            f31 = f15 / 2.2F;
            f7 = molebody.getPosition().x;
            f10 = f31 / 2.0F;
            f1 = molebody.getPosition().y;
            f2 = f31 / 2.0F;
            f12 = MathUtils.cosDeg(angle);
            f13 = -(-1.15F / 17.6F);
            f3 = MathUtils.sinDeg(angle);
            f4 = -(-1.15F / 17.6F);
            f52 = (f7 - f10 - f12 * f13) + MathUtils.sinDeg(angle) * -(f15 / 2.7F);
            f30 = (f1 - f2 - f3 * f4) + -MathUtils.cosDeg(angle) * -(f15 / 2.7F);
            f7 = molebody.getPosition().x;
            f10 = f31 / 2.0F;
            f1 = molebody.getPosition().y;
            f2 = f31 / 2.0F;
            f12 = MathUtils.cosDeg(angle);
            f13 = -(1.15F / 7.51F);
            f3 = MathUtils.sinDeg(angle);
            f4 = -(1.15F / 7.51F);
            f53 = (f7 - f10 - f12 * f13) + MathUtils.sinDeg(angle) * -(f15 / 3.375F);
            f56 = (f1 - f2 - f3 * f4) + -MathUtils.cosDeg(angle) * -(f15 / 3.375F);
            f7 = molebody.getPosition().x;
            f10 = f31 / 2.0F;
            f1 = molebody.getPosition().y;
            f2 = f31 / 2.0F;
            f12 = MathUtils.cosDeg(angle);
            f13 = -(1.15F / 12.39F);
            f3 = MathUtils.sinDeg(angle);
            f4 = -(1.15F / 12.39F);
            f54 = (f7 - f10 - f12 * f13) + MathUtils.sinDeg(angle) * -(f15 / 1.875F);
            f57 = (f1 - f2 - f3 * f4) + -MathUtils.cosDeg(angle) * -(f15 / 1.875F);
            f7 = molebody.getPosition().x;
            f10 = f31 / 2.0F;
            f1 = molebody.getPosition().y;
            f2 = f31 / 2.0F;
            f12 = MathUtils.cosDeg(angle);
            f13 = -(1.15F / 3.31F);
            f3 = MathUtils.sinDeg(angle);
            f4 = -(1.15F / 3.31F);
            f55 = (f7 - f10 - f12 * f13) + MathUtils.sinDeg(angle) * -(f15 / 2.389F);
            f58 = (f1 - f2 - f3 * f4) + -MathUtils.cosDeg(angle) * -(f15 / 2.389F);
            f1 = (float)tailR.getRegionHeight() / (float)tailR.getRegionWidth();
            f17 = 1.15F / 6.27F;
            f18 = f17 * f1;
            f7 = molebody.getPosition().x;
            f1 = molebody.getPosition().y;
            f2 = f18 / 2.0F;
            f10 = MathUtils.cosDeg(angle);
            f12 = 1.15F / 2.5F;
            f3 = MathUtils.sinDeg(angle);
            f4 = 1.15F / 2.5F;
            f59 = (f7 - f17 - f10 * f12) + MathUtils.sinDeg(angle) * (f15 / 13.5F);
            f16 = (f1 - f2 - f3 * f4) + -MathUtils.cosDeg(angle) * (f15 / 13.5F);
            if (Save.gd.skin == 1)
            {
                f1 = (float)eye1R.getRegionHeight() / (float)eye1R.getRegionWidth();
                f3 = 1.15F / 8F;
                f4 = f3 * f1;
                f7 = molebody.getPosition().x;
                f13 = f3 / 2.0F;
                f1 = molebody.getPosition().y;
                f2 = f4 / 2.0F;
                float f19 = MathUtils.cosDeg(angle);
                float f21 = -(1.15F / 5.5F);
                f10 = MathUtils.sinDeg(angle);
                f12 = -(1.15F / 5.5F);
                f7 = (f7 - f13 - f19 * f21) + MathUtils.sinDeg(angle) * -(f15 / 4F);
                f2 = (f1 - f2 - f10 * f12) + -MathUtils.cosDeg(angle) * -(f15 / 4F);
            } else
            {
                f1 = (float)eye1R.getRegionHeight() / (float)eye1R.getRegionWidth();
                f3 = 1.15F / 8.6F;
                f4 = f3 * f1;
                f7 = molebody.getPosition().x;
                f13 = f3 / 2.0F;
                f1 = molebody.getPosition().y;
                f2 = f4 / 2.0F;
                f20 = MathUtils.cosDeg(angle);
                f22 = -(1.15F / 5.5F);
                f10 = MathUtils.sinDeg(angle);
                f12 = -(1.15F / 5.5F);
                f7 = (f7 - f13 - f20 * f22) + MathUtils.sinDeg(angle) * -(f15 / 8F);
                f2 = (f1 - f2 - f10 * f12) + -MathUtils.cosDeg(angle) * -(f15 / 8F);
            }
            f1 = f11;
            if (hat != null)
            {
                f5 = (float)hat.getRegionHeight() / (float)hat.getRegionWidth();
                Sprite sprite;
                if (Save.gd.hat == 1)
                {
                    f1 = 1.15F / 1.0F;
                } else
                {
                    f1 = f9;
                    if (Save.gd.hat == 2)
                    {
                        f1 = 1.15F / 1.56F;
                    }
                }
                f6 = f1 * f5;
                f8 = molebody.getPosition().x;
                f12 = f1 / 2.0F;
                f5 = molebody.getPosition().y;
                f9 = f6 / 2.0F;
                f13 = MathUtils.cosDeg(angle);
                f20 = -(1.15F / 6.94F);
                f10 = MathUtils.sinDeg(angle);
                f11 = -(1.15F / 6.94F);
                f8 = (f8 - f12 - f13 * f20) + MathUtils.sinDeg(angle) * -(f15 / 2.2F);
                f9 = (f5 - f9 - f10 * f11) + -MathUtils.cosDeg(angle) * -(f15 / 2.2F);
                f5 = f1;
                f1 = f9;
            }
            f9 = (float)sangleR.getRegionHeight() / (float)sangleR.getRegionWidth();
            f33 = 1.15F / 5.277F;
            f34 = f33 * f9;
            f13 = molebody.getPosition().x;
            f20 = f33 / 2.0F;
            f9 = molebody.getPosition().y;
            f10 = f34 / 2.0F;
            f22 = MathUtils.cosDeg(angle);
            f23 = 1.15F / 5.33F;
            f11 = MathUtils.sinDeg(angle);
            f12 = 1.15F / 5.33F;
            f50 = (f13 - f20 - f22 * f23) + MathUtils.sinDeg(angle) * (f15 / 19.57F);
            f32 = (f9 - f10 - f11 * f12) + -MathUtils.cosDeg(angle) * (f15 / 19.57F);
            f9 = (float)jetR.getRegionHeight() / (float)jetR.getRegionWidth();
            f36 = 1.15F / 1.269F;
            f37 = f36 * f9;
            f13 = molebody.getPosition().x;
            f20 = f36 / 2.0F;
            f9 = molebody.getPosition().y;
            f10 = f37 / 2.0F;
            f22 = MathUtils.cosDeg(angle);
            f23 = 1.15F / 4.845F;
            f11 = MathUtils.sinDeg(angle);
            f12 = 1.15F / 4.845F;
            f45 = (f13 - f20 - f22 * f23) + MathUtils.sinDeg(angle) * (-f15 / 1.93F);
            f35 = (f9 - f10 - f11 * f12) + -MathUtils.cosDeg(angle) * (-f15 / 1.93F);
            f12 = molebody.getPosition().x;
            f9 = molebody.getPosition().y;
            f13 = MathUtils.cosDeg(angle);
            f20 = 1.15F / 2.1F;
            f10 = MathUtils.sinDeg(angle);
            f11 = 1.15F / 2.1F;
            f48 = (f12 - f13 * f20) + MathUtils.sinDeg(angle) * (-f15 / 2.2F);
            f49 = (f9 - f10 * f11) + -MathUtils.cosDeg(angle) * (-f15 / 2.2F);
            f47 = 180F + angle;
            f9 = (float)planeR.getRegionHeight() / (float)planeR.getRegionWidth();
            f66 = 1.15F * 1.2F;
            f67 = (f66 * f9) / 1.2F;
            f20 = molebody.getPosition().x;
            f22 = f66 / 2.0F;
            f10 = molebody.getPosition().y;
            f11 = f67 / 2.0F;
            f23 = MathUtils.cosDeg(angle);
            f24 = 1.15F / 8.845F;
            f12 = MathUtils.sinDeg(angle);
            f13 = 1.15F / 8.845F;
            f69 = (f20 - f22 - f23 * f24) + MathUtils.sinDeg(angle) * (-f15 / 2.596F);
            f70 = (f10 - f11 - f12 * f13) + -MathUtils.cosDeg(angle) * (-f15 / 2.596F);
            if (eyeLR != null)
            {
                f9 = (float)eyeLR.getRegionHeight() / (float)eyeLR.getRegionWidth();
            }
            f64 = 1.15F / 9.034F;
            f65 = f64 * f9;
            f20 = molebody.getPosition().x;
            f22 = f64 / 2.0F;
            f10 = molebody.getPosition().y;
            f11 = f65 / 2.0F;
            f23 = MathUtils.cosDeg(angle);
            f24 = -(1.15F / 5.2F);
            f12 = MathUtils.sinDeg(angle);
            f13 = -(1.15F / 5.2F);
            f60 = (f20 - f22 - f23 * f24) + MathUtils.sinDeg(angle) * -(f15 / (3.8F + 1.4F * Math.min(1.0F, holeL / 220F)));
            f62 = (f10 - f11 - f12 * f13) + -MathUtils.cosDeg(angle) * -(f15 / (3.8F + 1.4F * Math.min(1.0F, holeL / 220F)));
            if (legR != null)
            {
                f9 = (float)legR.getRegionHeight() / (float)legR.getRegionWidth();
            }
            f26 = 1.15F / 4.164F;
            f27 = f26 * f9;
            f20 = molebody.getPosition().x;
            f22 = f26 / 2.0F;
            f10 = molebody.getPosition().y;
            f11 = f27 / 2.0F;
            f23 = MathUtils.cosDeg(angle);
            f24 = 1.15F / 2.8F;
            f12 = MathUtils.sinDeg(angle);
            f13 = 1.15F / 2.8F;
            f42 = (f20 - f22 - f23 * f24) + MathUtils.sinDeg(angle) * (f15 / 3F);
            f25 = (f10 - f11 - f12 * f13) + -MathUtils.cosDeg(angle) * (f15 / 3F);
            if (armR != null)
            {
                f9 = (float)armR.getRegionHeight() / (float)armR.getRegionWidth();
            }
            f39 = 1.15F / 3.55F;
            f40 = f39 * f9;
            f13 = molebody.getPosition().x;
            f20 = f39 / 2.0F;
            f9 = molebody.getPosition().y;
            f10 = f40 / 2.0F;
            f22 = MathUtils.cosDeg(angle);
            f23 = 1.15F / 50.3F;
            f11 = MathUtils.sinDeg(angle);
            f12 = 1.15F / 50.3F;
            f51 = (f13 - f20 - f22 * f23) + MathUtils.sinDeg(angle) * (f15 / 8.75F);
            f38 = (f9 - f10 - f11 * f12) + -MathUtils.cosDeg(angle) * (f15 / 8.75F);
            f9 = (float)pawrR.getRegionHeight() / (float)pawrR.getRegionWidth();
            f23 = 1.15F / 3.23F;
            f24 = f23 * f9;
            f22 = (3F * f24) / 4F;
            f68 = 0.0F;
            f12 = molebody.getPosition().x;
            f13 = f23 / 4F;
            f9 = molebody.getPosition().y;
            f20 = MathUtils.cosDeg(angle);
            f28 = 1.15F / 2.8F;
            f10 = MathUtils.sinDeg(angle);
            f11 = 1.15F / 2.8F;
            f46 = (f12 - f13 - f20 * f28) + MathUtils.sinDeg(angle) * (f15 / 3F);
            f20 = (f9 - f22 - f10 * f11) + -MathUtils.cosDeg(angle) * (f15 / 3F);
            f9 = (float)pawf1R.getRegionHeight() / (float)pawf1R.getRegionWidth();
            f12 = 1.15F / 1.5F;
            f13 = f12 * f9;
            f11 = f13 * 0.6523157F;
            f9 = molebody.getPosition().x;
            f43 = f12 / 8.634F;
            f10 = molebody.getPosition().y;
            f44 = MathUtils.cosDeg(angle);
            f71 = 1.15F / 50.3F;
            f28 = MathUtils.sinDeg(angle);
            f29 = 1.15F / 50.3F;
            f9 = (f9 - f43 - f44 * f71) + MathUtils.sinDeg(angle) * (f15 / 8.75F);
            f10 = (f10 - f11 - f28 * f29) + -MathUtils.cosDeg(angle) * (f15 / 8.75F);
            f44 = f8;
            f43 = f7;
            f7 = f6;
            f29 = f5;
            f8 = f1;
            f28 = f4;
            f5 = f3;
            f6 = f2;
        } else
        {
            pawf1R.setFlip(false, true);
            pawf2R.setFlip(false, true);
            bodyR.setFlip(false, true);
            tailR.setFlip(false, true);
            pawrR.setFlip(false, true);
            eye1R.setFlip(false, true);
            eye2R.setFlip(false, true);
            if (eyeLR != null)
            {
                eyeLR.setFlip(false, true);
            }
            sensR.setFlip(false, true);
            if (armR != null)
            {
                armR.setFlip(false, true);
            }
            if (legR != null)
            {
                legR.setFlip(false, true);
            }
            if (planeR != null)
            {
                planeR.setFlip(false, true);
            }
            if (sangleR != null)
            {
                sangleR.setFlip(false, true);
            }
            if (jetR != null)
            {
                jetR.setFlip(false, true);
            }
            if (hat != null)
            {
                hat.setFlip(false, true);
            }
            animsens = -1F;
            if (!stun)
            {
                if (y <= 0.0F)
                {
                    animtimer = (float)((double)animtimer + Math.sqrt(animspeed) * 2D * (double)f);
                    animspeed = Math.max(0.02F, vitesse / 3F);
                    animup = false;
                    if (animtimer > 0.0F)
                    {
                        animtimer = -2F;
                    }
                } else
                {
                    if (animtimer > 0.0F)
                    {
                        animup = true;
                        animspeed = MathUtils.random(0.0F, 0.4F);
                    }
                    if (animtimer < -animspeed && animup)
                    {
                        animup = false;
                    }
                    if (animup)
                    {
                        animtimer = animtimer - 1.0F * f;
                    } else
                    {
                        animtimer = animtimer + 1.0F * f;
                    }
                }
            }
            f15 = 1.15F * ((float)bodyR.getRegionHeight() / (float)bodyR.getRegionWidth());
            f41 = molebody.getPosition().x - 1.15F / 2.0F;
            f14 = molebody.getPosition().y - f15 / 2.0F;
            f2 = (float)tailR.getRegionHeight() / (float)tailR.getRegionWidth();
            f17 = 1.15F / 6.27F;
            f18 = f17 * f2;
            f8 = molebody.getPosition().x;
            f2 = molebody.getPosition().y;
            f4 = f18 / 2.0F;
            f9 = MathUtils.cosDeg(angle);
            f11 = 1.15F / 2.5F;
            f5 = MathUtils.sinDeg(angle);
            f6 = 1.15F / 2.5F;
            f59 = (f8 - f17 - f9 * f11) + MathUtils.sinDeg(angle) * -(f15 / 13.5F);
            f16 = (f2 - f4 - f5 * f6) + -MathUtils.cosDeg(angle) * -(f15 / 13.5F);
            f31 = f15 / 2.2F;
            f8 = molebody.getPosition().x;
            f9 = f31 / 2.0F;
            f2 = molebody.getPosition().y;
            f4 = f31 / 2.0F;
            f11 = MathUtils.cosDeg(angle);
            f13 = -(-1.15F / 17.6F);
            f5 = MathUtils.sinDeg(angle);
            f6 = -(-1.15F / 17.6F);
            f52 = (f8 - f9 - f11 * f13) + MathUtils.sinDeg(angle) * (f15 / 2.7F);
            f30 = (f2 - f4 - f5 * f6) + -MathUtils.cosDeg(angle) * (f15 / 2.7F);
            f8 = molebody.getPosition().x;
            f9 = f31 / 2.0F;
            f2 = molebody.getPosition().y;
            f4 = f31 / 2.0F;
            f11 = MathUtils.cosDeg(angle);
            f13 = -(1.15F / 7.51F);
            f5 = MathUtils.sinDeg(angle);
            f6 = -(1.15F / 7.51F);
            f53 = (f8 - f9 - f11 * f13) + MathUtils.sinDeg(angle) * (f15 / 3.375F);
            f56 = (f2 - f4 - f5 * f6) + -MathUtils.cosDeg(angle) * (f15 / 3.375F);
            f8 = molebody.getPosition().x;
            f9 = f31 / 2.0F;
            f2 = molebody.getPosition().y;
            f4 = f31 / 2.0F;
            f11 = MathUtils.cosDeg(angle);
            f13 = -(1.15F / 12.39F);
            f5 = MathUtils.sinDeg(angle);
            f6 = -(1.15F / 12.39F);
            f54 = (f8 - f9 - f11 * f13) + MathUtils.sinDeg(angle) * (f15 / 1.875F);
            f57 = (f2 - f4 - f5 * f6) + -MathUtils.cosDeg(angle) * (f15 / 1.875F);
            f8 = molebody.getPosition().x;
            f9 = f31 / 2.0F;
            f2 = molebody.getPosition().y;
            f4 = f31 / 2.0F;
            f11 = MathUtils.cosDeg(angle);
            f13 = -(1.15F / 3.31F);
            f5 = MathUtils.sinDeg(angle);
            f6 = -(1.15F / 3.31F);
            f55 = (f8 - f9 - f11 * f13) + MathUtils.sinDeg(angle) * (f15 / 2.389F);
            f58 = (f2 - f4 - f5 * f6) + -MathUtils.cosDeg(angle) * (f15 / 2.389F);
            if (Save.gd.skin == 1)
            {
                f2 = (float)eye1R.getRegionHeight() / (float)eye1R.getRegionWidth();
                f5 = 1.15F / 8F;
                f4 = f5 * f2;
                f2 = molebody.getPosition().x;
                f13 = f5 / 2.0F;
                f6 = molebody.getPosition().y;
                f8 = f4 / 2.0F;
                f20 = MathUtils.cosDeg(angle);
                f22 = -(1.15F / 5.5F);
                f9 = MathUtils.sinDeg(angle);
                f11 = -(1.15F / 5.5F);
                f2 = (f2 - f13 - f20 * f22) + MathUtils.sinDeg(angle) * (f15 / 4F);
                f6 = (f6 - f8 - f9 * f11) + -MathUtils.cosDeg(angle) * (f15 / 4F);
            } else
            {
                f2 = (float)eye1R.getRegionHeight() / (float)eye1R.getRegionWidth();
                f5 = 1.15F / 8.6F;
                f4 = f5 * f2;
                f2 = molebody.getPosition().x;
                f13 = f5 / 2.0F;
                f6 = molebody.getPosition().y;
                f8 = f4 / 2.0F;
                f20 = MathUtils.cosDeg(angle);
                f22 = -(1.15F / 5.5F);
                f9 = MathUtils.sinDeg(angle);
                f11 = -(1.15F / 5.5F);
                f2 = (f2 - f13 - f20 * f22) + MathUtils.sinDeg(angle) * (f15 / 8F);
                f6 = (f6 - f8 - f9 * f11) + -MathUtils.cosDeg(angle) * (f15 / 8F);
            }
            f8 = f12;
            if (hat != null)
            {
                f3 = (float)hat.getRegionHeight() / (float)hat.getRegionWidth();
                if (Save.gd.hat == 1)
                {
                    f1 = 1.15F / 1.0F;
                } else
                {
                    f1 = f10;
                    if (Save.gd.hat == 2)
                    {
                        f1 = 1.15F / 1.56F;
                    }
                }
                f7 = f1 * f3;
                f3 = molebody.getPosition().x;
                f12 = f1 / 2.0F;
                f8 = molebody.getPosition().y;
                f9 = f7 / 2.0F;
                f13 = MathUtils.cosDeg(angle);
                f20 = -(1.15F / 6.94F);
                f10 = MathUtils.sinDeg(angle);
                f11 = -(1.15F / 6.94F);
                f3 = (f3 - f12 - f13 * f20) + MathUtils.sinDeg(angle) * (f15 / 2.2F);
                f8 = (f8 - f9 - f10 * f11) + -MathUtils.cosDeg(angle) * (f15 / 2.2F);
            }
            f9 = (float)sangleR.getRegionHeight() / (float)sangleR.getRegionWidth();
            f33 = 1.15F / 5.277F;
            f34 = f33 * f9;
            f13 = molebody.getPosition().x;
            f20 = f33 / 2.0F;
            f9 = molebody.getPosition().y;
            f10 = f34 / 2.0F;
            f22 = MathUtils.cosDeg(angle);
            f23 = 1.15F / 5.33F;
            f11 = MathUtils.sinDeg(angle);
            f12 = 1.15F / 5.33F;
            f50 = (f13 - f20 - f22 * f23) + MathUtils.sinDeg(angle) * -(f15 / 19.57F);
            f32 = (f9 - f10 - f11 * f12) + -MathUtils.cosDeg(angle) * -(f15 / 19.57F);
            f9 = (float)jetR.getRegionHeight() / (float)jetR.getRegionWidth();
            f36 = 1.15F / 1.269F;
            f37 = f36 * f9;
            f13 = molebody.getPosition().x;
            f20 = f36 / 2.0F;
            f9 = molebody.getPosition().y;
            f10 = f37 / 2.0F;
            f22 = MathUtils.cosDeg(angle);
            f23 = 1.15F / 4.845F;
            f11 = MathUtils.sinDeg(angle);
            f12 = 1.15F / 4.845F;
            f45 = (f13 - f20 - f22 * f23) + MathUtils.sinDeg(angle) * (f15 / 1.93F);
            f35 = (f9 - f10 - f11 * f12) + -MathUtils.cosDeg(angle) * (f15 / 1.93F);
            f12 = molebody.getPosition().x;
            f9 = molebody.getPosition().y;
            f13 = MathUtils.cosDeg(angle);
            f20 = 1.15F / 2.1F;
            f10 = MathUtils.sinDeg(angle);
            f11 = 1.15F / 2.1F;
            f48 = (f12 - f13 * f20) + MathUtils.sinDeg(angle) * (f15 / 2.2F);
            f49 = (f9 - f10 * f11) + -MathUtils.cosDeg(angle) * (f15 / 2.2F);
            f47 = 180F + angle;
            f9 = (float)planeR.getRegionHeight() / (float)planeR.getRegionWidth();
            f66 = 1.15F * 1.2F;
            f67 = (f66 * f9) / 1.2F;
            f20 = molebody.getPosition().x;
            f22 = f66 / 2.0F;
            f10 = molebody.getPosition().y;
            f11 = f67 / 2.0F;
            f23 = MathUtils.cosDeg(angle);
            f24 = 1.15F / 8.845F;
            f12 = MathUtils.sinDeg(angle);
            f13 = 1.15F / 8.845F;
            f69 = (f20 - f22 - f23 * f24) + MathUtils.sinDeg(angle) * (f15 / 2.596F);
            f70 = (f10 - f11 - f12 * f13) + -MathUtils.cosDeg(angle) * (f15 / 2.596F);
            if (eyeLR != null)
            {
                f9 = (float)eyeLR.getRegionHeight() / (float)eyeLR.getRegionWidth();
            }
            f64 = 1.15F / 9.034F;
            f65 = f64 * f9;
            f20 = molebody.getPosition().x;
            f22 = f64 / 2.0F;
            f10 = molebody.getPosition().y;
            f11 = f65 / 2.0F;
            f23 = MathUtils.cosDeg(angle);
            f24 = -(1.15F / 5.2F);
            f12 = MathUtils.sinDeg(angle);
            f13 = -(1.15F / 5.2F);
            f60 = (f20 - f22 - f23 * f24) + MathUtils.sinDeg(angle) * (f15 / (3.8F + 1.4F * Math.min(1.0F, holeL / 220F)));
            f62 = (f10 - f11 - f12 * f13) + -MathUtils.cosDeg(angle) * (f15 / (3.8F + 1.4F * Math.min(1.0F, holeL / 220F)));
            if (legR != null)
            {
                f9 = (float)legR.getRegionHeight() / (float)legR.getRegionWidth();
            }
            f26 = 1.15F / 4.164F;
            f27 = f26 * f9;
            f13 = molebody.getPosition().x;
            f20 = f26 / 2.0F;
            f9 = molebody.getPosition().y;
            f10 = f27 / 2.0F;
            f22 = MathUtils.cosDeg(angle);
            f23 = 1.15F / 2.8F;
            f11 = MathUtils.sinDeg(angle);
            f12 = 1.15F / 2.8F;
            f42 = (f13 - f20 - f22 * f23) + MathUtils.sinDeg(angle) * -(f15 / 3F);
            f25 = (f9 - f10 - f11 * f12) + -MathUtils.cosDeg(angle) * -(f15 / 3F);
            f9 = (float)pawrR.getRegionHeight() / (float)pawrR.getRegionWidth();
            f23 = 1.15F / 3.23F;
            f24 = f23 * f9;
            f22 = (1.0F * f24) / 4F;
            f68 = 270F;
            f12 = molebody.getPosition().x;
            f13 = f23 / 4F;
            f9 = molebody.getPosition().y;
            f20 = MathUtils.cosDeg(angle);
            f28 = 1.15F / 2.8F;
            f10 = MathUtils.sinDeg(angle);
            f11 = 1.15F / 2.8F;
            f46 = (f12 - f13 - f20 * f28) + MathUtils.sinDeg(angle) * -(f15 / 3F);
            f20 = (f9 - f22 - f10 * f11) + -MathUtils.cosDeg(angle) * -(f15 / 3F);
            f9 = (float)pawf1R.getRegionHeight() / (float)pawf1R.getRegionWidth();
            f12 = 1.15F / 1.5F;
            f13 = f12 * f9;
            f11 = f13 * 0.3476843F;
            f10 = molebody.getPosition().x;
            f39 = f12 / 8.634F;
            f28 = molebody.getPosition().y;
            f40 = MathUtils.cosDeg(angle);
            f43 = -(1.15F / 50.3F);
            f29 = MathUtils.sinDeg(angle);
            f38 = -(1.15F / 50.3F);
            f10 = (f10 - f39 - f40 * f43) + MathUtils.sinDeg(angle) * -(0.1142857F * f15);
            f28 = (f28 - f11 - f29 * f38) + -MathUtils.cosDeg(angle) * -(0.1142857F * f15);
            if (armR != null)
            {
                f9 = (float)armR.getRegionHeight() / (float)armR.getRegionWidth();
            }
            f39 = 1.15F / 3.55F;
            f40 = f39 * f9;
            f44 = molebody.getPosition().x;
            f51 = f39 / 2.0F;
            f9 = molebody.getPosition().y;
            f29 = f40 / 2.0F;
            f71 = MathUtils.cosDeg(angle);
            f72 = -(1.15F / 50.3F);
            f38 = MathUtils.sinDeg(angle);
            f43 = -(1.15F / 50.3F);
            f51 = (f44 - f51 - f71 * f72) + MathUtils.sinDeg(angle) * -(0.1142857F * f15);
            f38 = (f9 - f29 - f38 * f43) + -MathUtils.cosDeg(angle) * -(0.1142857F * f15);
            f9 = f10;
            f10 = f28;
            f28 = f4;
            f29 = f1;
            f43 = f2;
            f44 = f3;
        }
        if (y < 0.0F || vy > 0.0F)
        {
            senstimer = 0.0F;
        } else
        if (y > 0.0F && senstimer < 1.0F)
        {
            sens = true;
        } else
        if (y > 0.0F && senstimer > 2.0F)
        {
            sens = false;
        }
        if (sens)
        {
            senstimer = senstimer + (3F / (y + 12F)) * f * 60F;
        } else
        {
            senstimer = senstimer - (3F / (y + 12F)) * f * 60F;
        }
        if (stun)
        {
            stuntimer = stuntimer + 0.1F * f * 60F;
            if (stuntimer > 5F)
            {
                stuntimer = 0.0F;
            }
        }
        f71 = 0.0F;
        f72 = 0.0F;
        f73 = 0.0F;
        f2 = 0.0F;
        if (stuntimer < 1.0F)
        {
            f3 = stuntimer;
            f1 = f73;
            f4 = f72;
        } else
        if (stuntimer < 2.0F)
        {
            f3 = (1.0F - stuntimer) + 1.0F;
            f4 = -1F + stuntimer;
            f1 = f73;
        } else
        if (stuntimer < 3F)
        {
            f4 = (1.0F - stuntimer) + 2.0F;
            f1 = -2F + stuntimer;
            f3 = f71;
        } else
        if (stuntimer < 4F)
        {
            f1 = (1.0F - stuntimer) + 3F;
            f2 = -3F + stuntimer;
            f3 = f71;
            f4 = f72;
        } else
        if (stuntimer < 5F)
        {
            f1 = (1.0F - stuntimer) + 4F;
            f2 = -4F + stuntimer;
            f3 = f71;
            f4 = f72;
        } else
        {
            f3 = f71;
            f4 = f72;
            f1 = f73;
            if (stuntimer < 6F)
            {
                f2 = (1.0F - stuntimer) + 5F;
                f3 = f71;
                f4 = f72;
                f1 = f73;
            }
        }
        f71 = 1.15F * senstimer;
        f72 = molebody.getPosition().x;
        f73 = f71 / 2.0F;
        f74 = molebody.getPosition().y;
        f75 = f71 / 2.0F;
        if (y >= 0.0F) goto _L2; else goto _L1
_L1:
        sprite = pawf1R;
        f66 = f12 / 8.634F;
        f67 = angle;
        spritebatch.draw(sprite, f9, f10, f66, f11, f12, f13, 1.0F, 1.0F, (animtimer / 2.0F - (animsens * 3F) / 4.5F) * 270F + f67);
        spritebatch.draw(bodyR, f41, f14, 1.15F / 2.0F, f15 / 2.0F, 1.15F, f15, 1.0F, 1.0F, angle);
        spritebatch.draw(tailR, f59, f16, f17, f18 / 2.0F, f17, f18, 1.0F, 1.0F, angle + ((animtimer - 1.0F) % 0.5F) * 75F);
        spritebatch.draw(pawrR, f46, f20, f23 / 4F, f22, f23, f24, 1.0F, 1.0F, angle + (animtimer / 2.0F - animsens * 1.0F) * 180F);
        if (legR != null)
        {
            spritebatch.draw(legR, f42, f25, f26 / 2.0F, f27 / 2.0F, f26, f27, 1.0F, 1.0F, angle);
        }
        if (stun)
        {
            spritebatch.draw(eye2R, f43, f6, f5 / 2.0F, f28 / 2.0F, f5, f28, 1.0F, 1.0F, angle + 90F);
            if (hat != null)
            {
                spritebatch.draw(hat, f44, f8, f29 / 2.0F, f7 / 2.0F, f29, f7, 1.0F, 1.0F, angle);
            }
            spritebatch.setColor(1.0F, 1.0F, 1.0F, f3);
            spritebatch.draw(stunsR, f52, f30, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
            spritebatch.setColor(1.0F, 1.0F, 1.0F, f4);
            spritebatch.draw(stunsR, f53, f56, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
            spritebatch.setColor(1.0F, 1.0F, 1.0F, f1);
            spritebatch.draw(stunsR, f54, f57, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
            spritebatch.setColor(1.0F, 1.0F, 1.0F, f2);
            spritebatch.draw(stunsR, f55, f58, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
            spritebatch.setColor(1.0F, 1.0F, 1.0F, 1.0F);
        } else
        if (jetpack)
        {
            if (eyeLR != null)
            {
                spritebatch.draw(eyeLR, f60, f62, f64 / 2.0F, f65 / 2.0F, f64, f65, 1.0F, 1.0F, angle);
            }
            if (hat != null)
            {
                spritebatch.draw(hat, f44, f8, f29 / 2.0F, f7 / 2.0F, f29, f7, 1.0F, 1.0F, angle);
            }
            propeffect.setPosition(f48, f49);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setHighMax(20F + f47);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setLowMax(f47 - 20F);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setHighMin(f47);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setLowMin(f47);
            propeffect.draw(spritebatch, f);
            spritebatch.draw(sangleR, f50, f32, f33 / 2.0F, f34 / 2.0F, f33, f34, 1.0F, 1.0F, angle);
            spritebatch.draw(jetR, f45, f35, f36 / 2.0F, f37 / 2.0F, f36, f37, 1.0F, 1.0F, angle);
            spritebatch.draw(eye1R, f43, f6, f5 / 2.0F, f28 / 2.0F, f5, f28, 1.0F, 1.0F, angle);
        } else
        {
            spritebatch.draw(eye1R, f43, f6, f5 / 2.0F, f28 / 2.0F, f5, f28, 1.0F, 1.0F, angle);
            if (eyeLR != null)
            {
                spritebatch.draw(eyeLR, f60, f62, f64 / 2.0F, f65 / 2.0F, f64, f65, 1.0F, 1.0F, angle);
            }
            if (hat != null)
            {
                spritebatch.draw(hat, f44, f8, f29 / 2.0F, f7 / 2.0F, f29, f7, 1.0F, 1.0F, angle);
            }
        }
        spritebatch.draw(pawf2R, f9, f10, f12 / 8.634F, f11, f12, f13, 1.0F, 1.0F, 180F + (angle + (animtimer / 2.0F) * 210F));
        if (armR != null)
        {
            spritebatch.draw(armR, f51, f38, f39 / 2.0F, f40 / 2.0F, f39, f40, 1.0F, 1.0F, angle);
        }
_L4:
        return;
_L2:
        float f61;
        float f63;
        Sprite sprite1;
        if (anglediff < landangle / 2.0F && anglediff > -landangle / 2.0F)
        {
            spritebatch.setColor(0.0F, 1.0F, 0.0F, 1.0F);
        } else
        if (anglediff < landangle && anglediff > -landangle)
        {
            spritebatch.setColor(1.0F, 1.0F, 0.0F, 1.0F);
        } else
        {
            spritebatch.setColor(1.0F, 0.0F, 0.0F, 1.0F);
        }
        if (f71 > 0.0F)
        {
            spritebatch.draw(sensR, f72 - f73, f74 - f75, f71 / 2.0F, f71 / 2.0F, f71, f71, 1.0F, 1.0F, angle);
        }
        spritebatch.setColor(1.0F, 1.0F, 1.0F, 1.0F);
        sprite1 = pawf1R;
        f61 = f12 / 8.634F;
        f63 = angle;
        spritebatch.draw(sprite1, f9, f10, f61, f11, f12, f13, 1.0F, 1.0F, (animtimer / 2.0F - (animsens * 3F) / 5F) * 330F + f63);
        spritebatch.draw(bodyR, f41, f14, 1.15F / 2.0F, f15 / 2.0F, 1.15F, f15, 1.0F, 1.0F, angle);
        if (plane)
        {
            spritebatch.draw(sangleR, f50, f32, f33 / 2.0F, f34 / 2.0F, f33, f34, 1.0F, 1.0F, angle);
            spritebatch.draw(planeR, f69, f70, f66 / 2.0F, f67 / 2.0F, f66, f67, 1.0F, 1.0F, angle);
        }
        spritebatch.draw(tailR, f59, f16, f17, f18 / 2.0F, f17, f18, 1.0F, 1.0F, angle + ((animtimer - 1.0F) % 0.5F) * 75F);
        spritebatch.draw(pawrR, f46, f20, f23 / 4F, f22, f23, f24, 1.0F, 1.0F, (angle - 130F) + f68);
        if (legR != null)
        {
            spritebatch.draw(legR, f42, f25, f26 / 2.0F, f27 / 2.0F, f26, f27, 1.0F, 1.0F, angle);
        }
        if (!stun)
        {
            break; /* Loop/switch isn't completed */
        }
        spritebatch.draw(eye2R, f43, f6, f5 / 2.0F, f28 / 2.0F, f5, f28, 1.0F, 1.0F, angle + 90F);
        if (hat != null)
        {
            spritebatch.draw(hat, f44, f8, f29 / 2.0F, f7 / 2.0F, f29, f7, 1.0F, 1.0F, angle);
        }
        spritebatch.setColor(1.0F, 1.0F, 1.0F, f3);
        spritebatch.draw(stunsR, f52, f30, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
        spritebatch.setColor(1.0F, 1.0F, 1.0F, f4);
        spritebatch.draw(stunsR, f53, f56, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
        spritebatch.setColor(1.0F, 1.0F, 1.0F, f1);
        spritebatch.draw(stunsR, f54, f57, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
        spritebatch.setColor(1.0F, 1.0F, 1.0F, f2);
        spritebatch.draw(stunsR, f55, f58, f31 / 2.0F, f31 / 2.0F, f31, f31, 1.0F, 1.0F, angle);
        spritebatch.setColor(1.0F, 1.0F, 1.0F, 1.0F);
_L5:
        spritebatch.draw(pawf2R, f9, f10, f12 / 8.634F, f11, f12, f13, 1.0F, 1.0F, (angle + (animtimer / 2.0F + (animsens * 20F) / 215F) * 235F) - animsens * 210F);
        if (armR != null)
        {
            spritebatch.draw(armR, f51, f38, f39 / 2.0F, f40 / 2.0F, f39, f40, 1.0F, 1.0F, angle);
            return;
        }
        if (true) goto _L4; else goto _L3
_L3:
        if (jetpack)
        {
            spritebatch.draw(eye2R, f43, f6, f5 / 2.0F, f28 / 2.0F, f5, f28, 1.0F, 1.0F, angle);
            if (hat != null)
            {
                spritebatch.draw(hat, f44, f8, f29 / 2.0F, f7 / 2.0F, f29, f7, 1.0F, 1.0F, angle);
            }
            propeffect.setPosition(f48, f49);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setHighMax(20F + f47);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setLowMax(f47 - 20F);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setHighMin(f47);
            ((MyParticleEmitter)propeffect.getEmitters().get(0)).getAngle().setLowMin(f47);
            propeffect.draw(spritebatch, f);
            spritebatch.draw(sangleR, f50, f32, f33 / 2.0F, f34 / 2.0F, f33, f34, 1.0F, 1.0F, angle);
            spritebatch.draw(jetR, f45, f35, f36 / 2.0F, f37 / 2.0F, f36, f37, 1.0F, 1.0F, angle);
        } else
        {
            spritebatch.draw(eye2R, f43, f6, f5 / 2.0F, f28 / 2.0F, f5, f28, 1.0F, 1.0F, angle);
            if (hat != null)
            {
                spritebatch.draw(hat, f44, f8, f29 / 2.0F, f7 / 2.0F, f29, f7, 1.0F, 1.0F, angle);
            }
        }
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    public void renderexplosion(SpriteBatch spritebatch)
    {
        bleffect.update(Gdx.graphics.getDeltaTime(), 1.0F, 1.0F, vitesse * 2.0F, vitesse * 2.0F, false);
        expeffect.update(Gdx.graphics.getDeltaTime(), 1.0F, 1.0F, vitesse * 2.0F, vitesse * 2.0F, false);
        bleffect.draw(spritebatch);
        expeffect.draw(spritebatch);
    }

    public void rendertrail(SpriteBatch spritebatch)
    {
        if (!isudg3) goto _L2; else goto _L1
_L1:
        int i = moleposx.length - 1;
_L5:
        if (i > 0) goto _L4; else goto _L3
_L3:
        if (isudg0)
        {
            if (clawup <= 5)
            {
                ((MyParticleEmitter)traileffect.getEmitters().get(0)).getTint().setColors(color0);
                traileffect.loadEmitterImages(dust);
            }
            if (clawup > 5)
            {
                traileffect.loadEmitterImages(bronze);
            }
            if (clawup > 10)
            {
                traileffect.loadEmitterImages(silver);
            }
            if (clawup > 15)
            {
                traileffect.loadEmitterImages(gold);
            }
            newmvalue = (vitesse / 2.0F - 2.0F) / 40F;
            newMvalue = (vitesse / 2.0F - 2.0F) / 20F;
            newvvalue = (vx + vy) / 20F;
            newVvalue = (vx + vy) / 20F;
        }
        if (y > yg0 && y < yg0 + 5F)
        {
            newMvalue = 1.0F / (3.5F * y);
            newmvalue = 0.0F;
            newvvalue = (vx + vy) / 10F;
            newVvalue = (vx + vy) / 10F;
        }
        if (isudg0);
        if (y > 30F && vy > 0.0F)
        {
            ((MyParticleEmitter)traileffect.getEmitters().get(0)).getTint().setColors(new float[] {
                1.0F, 1.0F, 1.0F
            });
            traileffect.loadEmitterImages(smoke);
        }
        if (y > 42F && !explodedc)
        {
            ((MyParticleEmitter)bleffect.getEmitters().get(0)).getTint().setColors(new float[] {
                1.0F, 1.0F, 1.0F
            });
            bleffect.scaleEffectAbs(bleffect, 0, 0.64F, 0.0F, 4F, 10F, 1.0F, 0, -0.8F, 0.96F, -1F, 0.0F, 2.0F, 4F, -2F);
            bleffect.loadEmitterImages(smoke);
            bleffect.setPosition(molebody.getPosition().x, y);
            bleffect.start();
            explodedc = true;
        }
        if (y > 60F)
        {
            traileffect.loadEmitterImages(fire);
        }
        if (y >= 60F && !explodedf)
        {
            if (Save.gd.sound)
            {
                sbland3.play(1.0F, 0.5F, 0.0F);
            }
            expeffect.setPosition(molebody.getPosition().x, y);
            expeffect.start();
            explodedf = true;
        }
        if (y > 80F)
        {
            traileffect.loadEmitterImages(star);
        }
        if (y > 80F && !explodeds)
        {
            bleffect.loadEmitterImages(star);
            bleffect.scaleEffect(bleffect, 0, 3F);
            bleffect.setPosition(molebody.getPosition().x, y);
            bleffect.start();
            explodeds = true;
            scaleds = true;
        }
        if (scaleds && y < 70F)
        {
            bleffect.scaleEffect(bleffect, 0, 0.3333333F);
            scaleds = false;
        }
        if (explodedc && isudg0)
        {
            explodedc = false;
            explodedf = false;
            explodeds = false;
        }
        traileffect.setPosition(molebody.getPosition().x, y);
        if (y > yg0 && !explodedc)
        {
            traileffect.update(Gdx.graphics.getDeltaTime() * (1.0F + (vitesse - 5F) / 300F), newmvalue, newMvalue, newvvalue, newVvalue, true);
        } else
        {
            traileffect.update(Gdx.graphics.getDeltaTime() * (1.0F + (vitesse - 5F) / 300F), 1.0F, 1.0F, 1.0F, 1.0F, true);
        }
        i = moleposx.length - 1;
_L7:
        if (i <= -1)
        {
            traileffect.draw(spritebatch);
            return;
        }
        break MISSING_BLOCK_LABEL_1414;
_L4:
        moleposx[i] = moleposx[i - 1];
        moleposy[i] = moleposy[i - 1];
        moleangle[i] = moleangle[i - 1];
        trails[i] = trails[i - 1];
        moleposx[0] = molebody.getPosition().x;
        moleposy[0] = y;
        moleangle[0] = molebody.getAngle();
        trails[0] = hole4;
        i--;
          goto _L5
_L2:
        if (isudg2)
        {
            i = moleposx.length - 1;
            while (i > 0) 
            {
                moleposx[i] = moleposx[i - 1];
                moleposy[i] = moleposy[i - 1];
                moleangle[i] = moleangle[i - 1];
                trails[i] = trails[i - 1];
                moleposx[0] = molebody.getPosition().x;
                moleposy[0] = y;
                moleangle[0] = molebody.getAngle();
                trails[0] = hole3;
                i--;
            }
        } else
        {
            if (!isudg1)
            {
                continue; /* Loop/switch isn't completed */
            }
            i = moleposx.length - 1;
            while (i > 0) 
            {
                moleposx[i] = moleposx[i - 1];
                moleposy[i] = moleposy[i - 1];
                moleangle[i] = moleangle[i - 1];
                trails[i] = trails[i - 1];
                moleposx[0] = molebody.getPosition().x;
                moleposy[0] = y;
                moleangle[0] = molebody.getAngle();
                trails[0] = hole2;
                i--;
            }
        }
          goto _L3
        if (y >= yg0 - 0.2F) goto _L3; else goto _L6
_L6:
        i = moleposx.length - 1;
        while (i > 0) 
        {
            moleposx[i] = moleposx[i - 1];
            moleposy[i] = moleposy[i - 1];
            moleangle[i] = moleangle[i - 1];
            trails[i] = trails[i - 1];
            moleposx[0] = molebody.getPosition().x;
            moleposy[0] = y;
            moleangle[0] = molebody.getAngle();
            trails[0] = hole1;
            i--;
        }
          goto _L3
        trails[i].setOrigin(trails[0].getWidth() / 2.0F, trails[0].getHeight() / 2.0F);
        trails[i].setPosition(moleposx[i] - trails[0].getWidth() / 2.0F, moleposy[i] - trails[0].getHeight() / 2.0F);
        trails[i].setSize(1.05F + (vitesse - 5F) / 100F, 1.05F);
        trails[i].setRotation(moleangle[i] * 57.29578F);
        trails[i].draw(spritebatch);
        i--;
          goto _L7
    }

    public void updateMole(World world, Mole mole, float f)
    {
        if (autoplane)
        {
            auto = true;
        }
        if (timeslow)
        {
            if (timetimer > 0.0F)
            {
                timetimer = timetimer - timeduration * f;
            } else
            {
                timetimer = 0.0F;
                timeslow = false;
            }
        }
        if (jetpack && jptimer > 0.0F && !jetpacked)
        {
            jptimer = jptimer - jpduration * f;
        } else
        if (jptimer < 3F && jetpacked && jpnumber > 0)
        {
            jptimer = jptimer + jpduration * f;
        } else
        if (jptimer > 3F)
        {
            jptimer = 3F;
            jetpacked = false;
        }
        if (jptimer <= 0.0F)
        {
            jetpack = false;
            jetpacked = true;
        }
        if (plane)
        {
            if (planetimer > 0.0F)
            {
                planetimer = planetimer - planeduration * f;
            } else
            {
                planetimer = 0.0F;
                plane = false;
            }
        }
        if (lvl == 2000)
        {
            vitesse = vitesse + (float)speedup;
            speedup = 0;
            landangle = clawup + 20;
            rotspeed = 5F + (float)controlup / 2.0F;
            airCtrl = (float)(controlup + 1) * (1.0F + vitesse);
            float f1;
            if (!autotuto)
            {
                if (isudg3)
                {
                    vitesse = vitesse - vitesse / (float)((clawup + 40) * 1);
                } else
                if (isudg2)
                {
                    vitesse = vitesse - vitesse / (float)((clawup + 40) * 2);
                } else
                if (isudg1)
                {
                    vitesse = vitesse - vitesse / (float)((clawup + 40) * 3);
                }
            }
            if (clawup > 5)
            {
                cl.canrock = true;
            }
            if (clawup > 10)
            {
                cl.canHrock = true;
            }
            if (clawup > 15)
            {
                cl.canlava = true;
            }
        } else
        if (lvl == 2001)
        {
            vitesse = vitesse + (float)speedup;
            speedup = 0;
            rotspeed = Save.gd.rotspeed + (float)controlup / 4F;
            vmin = Math.min(vmin, vitesse);
            airCtrl = Save.gd.airCtrl * (1.0F + vitesse);
            if (Save.gd.canrock)
            {
                cl.canrock = true;
            }
            if (Save.gd.canHrock)
            {
                cl.canHrock = true;
            }
            if (Save.gd.canlava)
            {
                cl.canlava = true;
            }
        } else
        if (lvl == 2004)
        {
            if (!isudg0)
            {
                autoplane = false;
                vmin = 0.0F;
            }
            airCtrl = Save.gd.airCtrl * (1.0F + vitesse);
            if (Save.gd.canrock)
            {
                cl.canrock = true;
            }
            if (Save.gd.canHrock)
            {
                cl.canHrock = true;
            }
            if (Save.gd.canlava)
            {
                cl.canlava = true;
            }
        } else
        if (lvl == 2002 || lvl == 2003)
        {
            vitesse = vitesse + (float)speedup;
            speedup = 0;
            landangle = 20F;
            rotspeed = Save.gd.rotspeed + (float)controlup / 4F;
            acceler = Save.gd.acceler;
            if (!autotuto && !timeslow)
            {
                if (isudg3)
                {
                    vitesse = vitesse - vitesse / (1.0F * (40F + digdamp + (float)clawup));
                } else
                if (isudg2)
                {
                    vitesse = vitesse - vitesse / (2.0F * (40F + digdamp + (float)clawup));
                } else
                if (isudg1)
                {
                    vitesse = vitesse - vitesse / (3F * (40F + digdamp + (float)clawup));
                } else
                if (isudg0)
                {
                    vitesse = vitesse - vitesse / (8F * (40F + digdamp + (float)clawup));
                }
            }
            vmin = Save.gd.vmin;
            vmin = Math.min(vmin, vitesse);
            airCtrl = (Save.gd.airCtrl + (float)controlup) * (1.0F + vitesse);
            if (Save.gd.canrock)
            {
                cl.canrock = true;
            }
            if (Save.gd.canHrock)
            {
                cl.canHrock = true;
            }
            if (Save.gd.canlava)
            {
                cl.canlava = true;
            }
        } else
        if (lvl < 11)
        {
            if (vitesse < 8F)
            {
                vitesse = vitesse + 0.05F;
            }
            if (Save.gd.canrock)
            {
                cl.canrock = true;
            }
            if (Save.gd.canHrock)
            {
                cl.canHrock = true;
            }
            if (Save.gd.canlava)
            {
                cl.canlava = true;
            }
        } else
        if (lvl >= 11 && lvl < 22)
        {
            vmin = Math.min(vmin, vitesse);
            airCtrl = Save.gd.airCtrl * (1.0F + vitesse);
            if (Save.gd.canrock)
            {
                cl.canrock = true;
            }
            if (Save.gd.canHrock)
            {
                cl.canHrock = true;
            }
            if (Save.gd.canlava)
            {
                cl.canlava = true;
            }
        } else
        if (lvl >= 22 && lvl < 42)
        {
            if (!timeslow && !autotuto && !auto)
            {
                if (isudg3 && vitesse > vmin)
                {
                    vitesse = vitesse - vitesse / (1.0F * (45F + digdamp));
                } else
                if (isudg2 && vitesse > vmin)
                {
                    vitesse = vitesse - vitesse / (4F * (45F + digdamp));
                } else
                if (isudg1 && vitesse > vmin)
                {
                    vitesse = vitesse - vitesse / (6F * (45F + digdamp));
                } else
                if (isudg0 && vitesse > vmin)
                {
                    timeudg = timeudg + vitesse / (1000F * (70F + 2.0F * digdamp));
                }
            }
            if (vitesse > vmin)
            {
                vitesse = vitesse - timeudg;
            }
            airCtrl = Save.gd.airCtrl * (1.0F + vitesse);
            if (Save.gd.canrock)
            {
                cl.canrock = true;
            }
            if (Save.gd.canHrock)
            {
                cl.canHrock = true;
            }
            if (Save.gd.canlava)
            {
                cl.canlava = true;
            }
        }
        if (!auto && !autotuto)
        {
            updateInput();
        } else
        {
            molebody.setAngularVelocity(0.0F);
        }
        angle = (float)((double)molebody.getAngle() % 6.2831853071795862D) * 57.29578F;
        if (angle < 0.0F)
        {
            angle = angle + 360F;
        }
        y = molebody.getPosition().y;
        vx = molebody.getLinearVelocity().x;
        vy = molebody.getLinearVelocity().y;
        ((Fixture)molebody.getFixtureList().get(0)).setRestitution(3F / vitesse);
        if (Save.gd.sound)
        {
            updateSound(f);
        }
        if (y < yg0)
        {
            isudg0 = true;
        } else
        {
            isudg0 = false;
            timeudg = 0.0F;
        }
        if (y < yug1)
        {
            isudg1 = true;
        } else
        if (y > yug1)
        {
            isudg1 = false;
        }
        if (y < yug2)
        {
            isudg2 = true;
        } else
        if (y > yug2)
        {
            isudg2 = false;
        }
        if (y < yug3)
        {
            isudg3 = true;
        } else
        if (y > yug3)
        {
            isudg3 = false;
        }
        if (cl.molegrdtouch && vy > 0.0F)
        {
            cl.molegrdtouch = false;
        }
        dist = (int)molebody.getPosition().x;
        if (isudg0)
        {
            holeL = holeL + vitesse * f;
            holeLscore = holeLscore + vitesse * f;
            totholeL = totholeL + vitesse * f;
        } else
        {
            holeL = 0.0F;
            holeLscore = 0.0F;
        }
        f1 = (float)((((double)molebody.getAngle() % 6.2831853071795862D - (double)((int)(((double)molebody.getAngle() / 3.1415926535897931D) % 2D) * 2) * 3.1415926535897931D) * 360D) / 6.2831853071795862D);
        anglediff = molebody.getLinearVelocity().angle() - angle;
        if (cl.molegrdtouch && vy < 0.0F)
        {
            if (anglediff < landangle / 2.0F && anglediff > -landangle / 2.0F)
            {
                goodlandui = 2;
                if (Save.gd.sound)
                {
                    sland.play();
                }
                totalgoodland = totalgoodland + 1;
                goodland = goodland + 1;
                vitesse = vitesse + 1.0F + (float)((backflip + frontflip) * (combo + 1)) * acceler;
                frontflip = 0;
                backflip = 0;
                combo = 0;
            } else
            if (anglediff < landangle && anglediff > -landangle)
            {
                goodlandui = 1;
                if (Save.gd.sound)
                {
                    sland.play();
                }
                totalgoodland = totalgoodland + 1;
                goodland = goodland + 1;
                vitesse = vitesse + 1.0F + ((float)((backflip + frontflip) * (combo + 1)) * acceler) / 2.0F;
                frontflip = 0;
                backflip = 0;
                combo = 0;
            } else
            {
                badland = badland + 1;
                goodlandui = 0;
                goodland = 0;
                badlanded = true;
                frontflip = 0;
                backflip = 0;
                combo = 0;
                bleffect.reset();
                ((MyParticleEmitter)bleffect.getEmitters().get(0)).getTint().setColors(color0);
                bleffect.loadEmitterImages(dust);
                if (vitesse < 50F)
                {
                    f = (vitesse - 4F) / 50F;
                } else
                {
                    f = 1.0F;
                }
                bleffect.scaleEffectAbs(bleffect, 0, 0.64F * f, 0.0F, 4F * f, 10F * f, 1.0F * f, 0, -0.8F * f, 0.96F * f, -1F * f, 0.0F, 2.0F * f, 4F * f, -2F * f);
                bleffect.setPosition(molebody.getPosition().x, y);
                bleffect.start();
                if (!explodedc && Save.gd.sound)
                {
                    sbland1.play();
                }
                if (explodedc && Save.gd.sound)
                {
                    sbland2.play();
                }
                if (explodedf)
                {
                    if (Save.gd.sound)
                    {
                        sbland3.play(1.0F, 0.5F, 0.0F);
                    }
                    expeffect.reset();
                    expeffect.setPosition(molebody.getPosition().x, y);
                    expeffect.scaleEffectAbs(bleffect, 0, 0.64F * f, 0.0F, 4F * f, 10F * f, 1.0F * f, 0, -0.8F * f, 0.96F * f, -1F * f, 0.0F, 2.0F * f, 4F * f, -2F * f);
                    expeffect.start();
                }
                f = -0.008857143F * Math.abs(anglediff) + 0.9471428F;
                if (Math.abs(anglediff) < 90F && vitesse * f > (float)Math.sqrt(vitesse) && vitesse * f > vmin)
                {
                    blpower = (0.5F * (vitesse - vmin)) / 60F;
                    vitesse = vitesse * f;
                } else
                if ((float)Math.sqrt(vitesse) > vmin)
                {
                    blpower = (1.0F * (vitesse - vmin)) / 60F;
                    vitesse = (float)Math.sqrt(vitesse);
                } else
                {
                    blpower = (1.0F * (vitesse - vmin)) / 60F;
                    vitesse = vmin;
                }
            }
            cl.molegrdtouch = false;
        }
        if (isudg0)
        {
            if (plane)
            {
                plane = false;
            }
            if (cl.moleUgrdtouch || cl.moleUgrdtouch1 || cl.moleUgrdtouch2 || cl.moleUgrdtouch3)
            {
                sdig.stop();
                stun = true;
                colided = true;
                holeL = 0.0F;
                holeLscore = 0.0F;
                if (Save.gd.sound)
                {
                    sstun.play();
                }
                vitesse = 5F;
                cl.moleUgrdtouch = false;
                cl.moleUgrdtouch1 = false;
                cl.moleUgrdtouch2 = false;
                cl.moleUgrdtouch3 = false;
            }
            if ((double)vy < -0.10000000000000001D && stun)
            {
                stun = false;
                sdigplay = false;
            } else
            if (vy == 0.0F && stun)
            {
                molebody.applyForceToCenter(0.0F, 100F, true);
            } else
            if (vy == 0.0F)
            {
                molebody.applyForceToCenter(0.0F, 200F, true);
            } else
            if (!stun)
            {
                if (jetpack)
                {
                    vitesse = vitesse + (jptrust * jptimer) / 160F;
                }
                molebody.setLinearVelocity(vitesse * MathUtils.cos(molebody.getAngle()), vitesse * MathUtils.sin(molebody.getAngle()));
            }
            molebody.setLinearDamping(0.0F);
        } else
        if (!isudg0 && plane && !stun)
        {
            float f2;
            if (vy >= 0.0F)
            {
                molebody.setLinearDamping(planeaerod);
            } else
            {
                molebody.setLinearDamping(0.0F);
            }
            if (jetpack)
            {
                molebody.applyForceToCenter(jptrust * jptimer * MathUtils.cos(molebody.getAngle()), jptrust * jptimer * MathUtils.sin(molebody.getAngle()), true);
            }
            f2 = molebody.getLinearVelocity().len();
            vitesse = f2;
            if (f2 < 10F)
            {
                if (MathUtils.cosDeg(angle) >= 0.0F)
                {
                    f = -6F * (10F - f2) * (10F - f2);
                } else
                {
                    f = 6F * (10F - f2) * (10F - f2);
                }
                molebody.applyTorque(f, true);
            }
            molebody.setLinearVelocity(new Vector2(MathUtils.cos(molebody.getAngle()) * f2, MathUtils.sin(molebody.getAngle()) * f2));
        } else
        if (!isudg0 && jetpack && !stun)
        {
            molebody.applyForceToCenter(jptrust * jptimer * MathUtils.cos(molebody.getAngle()), jptrust * jptimer * MathUtils.sin(molebody.getAngle()), true);
        }
        if (auto)
        {
            auto1(anglediff);
        }
        if (autotuto)
        {
            auto2(f1);
        }
    }
}
